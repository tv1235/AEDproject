/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.InventoryManagerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.SupplierEnterprise;
import Business.Inventory.Resource;
import Business.Network.Network;
import Business.Organization.FoodOrganization;
import Business.Organization.InventoryManagerOrganization;
import Business.Organization.MedicalOrganization;
import Business.Organization.Organization;
import Business.Organization.ShelterOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FoodSupplyWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.MedicalSupplyWorkRequest;
import Business.WorkQueue.ShelterAllocationWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Map.Entry;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.InventoryManagerRole.InventoryReportJPanel;

/**
 *
 * @author vignesh
 */
public class InventoryManagerWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private InventoryManagerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Network network;

    /**
     * Creates new form InventoryManagerWorkAreaJPanel
     */
    public InventoryManagerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, InventoryManagerOrganization organization, Enterprise enterprise, Network network) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.network = network;
        this.userAccount = account;
        valueLabel.setText(enterprise.getName());
        populateRequestTable();
        populateStockTable();
    }

    public void populateStockTable() {
        DefaultTableModel model = (DefaultTableModel) stockJTable.getModel();

        model.setRowCount(0);

        for (Entry r : this.enterprise.getInventoryDirectory().getInventoryMap().entrySet()) {

            Object[] row = new Object[2];
            row[0] = r.getKey(); // type
            row[1] = r.getValue(); // count
            model.addRow(row);

        }

    }

    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            String result = null;
            if (request instanceof LabTestWorkRequest) {
                result = ((LabTestWorkRequest) request).getTestResult();
            } else if (request instanceof FoodSupplyWorkRequest) {
                result = ((FoodSupplyWorkRequest) request).getResult();
            } else if (request instanceof ShelterAllocationWorkRequest) {
                result = ((ShelterAllocationWorkRequest) request).getResult();
            } else if (request instanceof MedicalSupplyWorkRequest) {
                result = ((MedicalSupplyWorkRequest) request).getResult();
            }

            row[3] = request.getStatus();
            row[4] = request.getCount();

            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stockJTable = new javax.swing.JTable();
        refreshTestJButton = new javax.swing.JButton();
        requestTestJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        refreshJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();
        enterpriseLabel1 = new javax.swing.JLabel();
        reportjButton = new javax.swing.JButton();
        enterpriseLabel2 = new javax.swing.JLabel();

        setToolTipText("");

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("Inventory Request:");

        valueLabel.setText("<value>");

        stockJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Item Type", "Total Availability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(stockJTable);

        refreshTestJButton.setBackground(new java.awt.Color(248, 249, 249));
        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        requestTestJButton.setBackground(new java.awt.Color(248, 249, 249));
        requestTestJButton.setText("Create Supplier Request ");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestJTable);

        refreshJButton.setBackground(new java.awt.Color(248, 249, 249));
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        processJButton.setBackground(new java.awt.Color(248, 249, 249));
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        assignJButton.setBackground(new java.awt.Color(248, 249, 249));
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        enterpriseLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel1.setText("Inventory Reports:");

        reportjButton.setBackground(new java.awt.Color(248, 249, 249));
        reportjButton.setText("Report");
        reportjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportjButtonActionPerformed(evt);
            }
        });

        enterpriseLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel2.setText("Inventory Stock:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(requestTestJButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(188, 188, 188)
                            .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(refreshTestJButton))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(enterpriseLabel)
                        .addGap(246, 246, 246)
                        .addComponent(refreshJButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(assignJButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(processJButton))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(reportjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterpriseLabel1))
                .addContainerGap(180, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(37, 37, 37)
                    .addComponent(enterpriseLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(510, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(refreshJButton)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(processJButton)
                    .addComponent(assignJButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(refreshTestJButton)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(requestTestJButton)
                .addGap(18, 18, 18)
                .addComponent(enterpriseLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(reportjButton)
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(255, 255, 255)
                    .addComponent(enterpriseLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(270, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        populateStockTable();

    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        SupplierEnterprise supplierEnterprise = null;
        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (e.getEnterpriseType().equals(Enterprise.EnterpriseType.Supplier)) {
                supplierEnterprise = (SupplierEnterprise) e;
                break;
            }
        }
        if (supplierEnterprise == null) {
            JOptionPane.showMessageDialog(null, "Supplier Enterprise is not available", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        userProcessContainer.add("InventoryRequestSupplyJPanel", new InventoryRequestSupplyJPanel(userProcessContainer, userAccount, organization, supplierEnterprise));
        layout.next(userProcessContainer);

    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateRequestTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            return;
        }
        // select which type of request - see populate request function
        // set status as processing(if a new supplier request is created)/completed(stock available in inventory)
        int totalFoodCount = 0;
        int totalShelterCount = 0;
        int totalMedicineCount = 0;

        if (this.enterprise.getInventoryDirectory().getInventoryMap().containsKey(Resource.Type.Food.getValue())) {
            totalFoodCount = this.enterprise.getInventoryDirectory().getInventoryMap().get(Resource.Type.Food.getValue());
        }

        if (this.enterprise.getInventoryDirectory().getInventoryMap().containsKey(Resource.Type.Shelter.getValue())) {
            totalShelterCount = this.enterprise.getInventoryDirectory().getInventoryMap().get(Resource.Type.Shelter.getValue());
        }

        if (this.enterprise.getInventoryDirectory().getInventoryMap().containsKey(Resource.Type.Medicine.getValue())) {
            totalMedicineCount = this.enterprise.getInventoryDirectory().getInventoryMap().get(Resource.Type.Medicine.getValue());
        }

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getStatus().equalsIgnoreCase("completed")) {
            JOptionPane.showMessageDialog(null, "Request already processed", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        request.setReceiver(userAccount);

        if (request instanceof FoodSupplyWorkRequest) {
            if (request.getCount() <= totalFoodCount) {
                int newFoodCount = totalFoodCount - request.getCount();
                this.enterprise.getInventoryDirectory().getInventoryMap().put(Resource.Type.Food.getValue(), newFoodCount);
                request.setStatus("Completed");
            } else {
                Organization org = null;
                SupplierEnterprise supplierEnterprise = null;
                for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e.getEnterpriseType().equals(Enterprise.EnterpriseType.Supplier)) {
                        supplierEnterprise = (SupplierEnterprise) e;
                        break;
                    }
                }
                if (supplierEnterprise == null) {
                    JOptionPane.showMessageDialog(null, "Supplier Enterprise is not available", "Error", JOptionPane.ERROR_MESSAGE);
                    request.setStatus("request cannot be completed now");
                    return;
                }
                for (Organization organization : supplierEnterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof FoodOrganization) {
                        org = organization;
                        break;
                    }
                }
                //request.setSender(userAccount);
                request.setReceiver(null);
                request.setStatus("notify supplier");
                if (org != null) {
                    org.getWorkQueue().getWorkRequestList().add(request);
                }
            }

        } else if (request instanceof ShelterAllocationWorkRequest) {
            if (request.getCount() <= totalShelterCount) {
                int newShelterCount = totalShelterCount - request.getCount();
                this.enterprise.getInventoryDirectory().getInventoryMap().put(Resource.Type.Shelter.getValue(), newShelterCount);
                request.setStatus("Completed");
            } else {
                Organization org = null;
                SupplierEnterprise supplierEnterprise = null;
                for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e.getEnterpriseType().equals(Enterprise.EnterpriseType.Supplier)) {
                        supplierEnterprise = (SupplierEnterprise) e;
                        break;
                    }
                }
                if (supplierEnterprise == null) {
                    JOptionPane.showMessageDialog(null, "Supplier Enterprise is not available", "Error", JOptionPane.ERROR_MESSAGE);
                    request.setStatus("request cannot be completed now");
                    return;
                }
                for (Organization organization : supplierEnterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof ShelterOrganization) {
                        org = organization;
                        break;
                    }
                }
                //request.setSender(userAccount);
                request.setReceiver(null);
                request.setStatus("notify Allocator");
                if (org != null) {
                    org.getWorkQueue().getWorkRequestList().add(request);
                }
            }

        } else if (request instanceof MedicalSupplyWorkRequest) {
            if (request.getCount() <= totalMedicineCount) {
                int newMedicineCount = totalMedicineCount - request.getCount();
                this.enterprise.getInventoryDirectory().getInventoryMap().put(Resource.Type.Medicine.getValue(), newMedicineCount);
                request.setStatus("Completed");
            } else {
                Organization org = null;
                SupplierEnterprise supplierEnterprise = null;
                for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e.getEnterpriseType().equals(Enterprise.EnterpriseType.Supplier)) {
                        supplierEnterprise = (SupplierEnterprise) e;
                        break;
                    }
                }
                if (supplierEnterprise == null) {
                    JOptionPane.showMessageDialog(null, "Supplier Enterprise is not available", "Error", JOptionPane.ERROR_MESSAGE);
                    request.setStatus("request cannot be completed now");
                    return;
                }
                for (Organization organization : supplierEnterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof MedicalOrganization) {
                        org = organization;
                        break;
                    }
                }
                //request.setSender(userAccount);
                request.setReceiver(null);
                request.setStatus("Notify Supplier");
                if (org != null) {
                    org.getWorkQueue().getWorkRequestList().add(request);
                }
            }

        }
        
        for(String email: request.getSubscribedEmails()){
            EcoSystem.sendmail(email, request.getMessage()+"-" +request.getStatus());
        }
        
        populateRequestTable();
        populateStockTable();

    }//GEN-LAST:event_processJButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {

            return;
        }
        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);

        request.setReceiver(userAccount);
        request.getSubscribedEmails().add(userAccount.getEmail());
        request.setStatus("Pending");
        populateRequestTable();

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void reportjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportjButtonActionPerformed
        // TODO add your handling code here:
        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("RefugeeDetailsJPanel", new InventoryReportJPanel(userProcessContainer, userAccount, organization, enterprise));
        layout.next(userProcessContainer);

    }//GEN-LAST:event_reportjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel enterpriseLabel1;
    private javax.swing.JLabel enterpriseLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JButton reportjButton;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JTable stockJTable;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
